* Debian 9 Stretch - installation notes
** Install Nvidia drivers(Optional)
   sudo apt install linux-headers-$(uname -r|sed 's/[^-]*-[^-]*-//') nvidia-driver

** Downgrade to gcc 4.9
   Downgrade gcc to 4.9. After CUDA is installed you can set it back to gcc 6 To
   install just the drivers, the gcc 6 works. CUDA works only with gcc 4.9

   Install these packages:

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/gcc-4.9-base_4.9.2-10_amd64.deb
   sudo dpkg -i gcc-4.9-base_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/i/isl/libisl10_0.12.2-2_amd64.deb
   sudo dpkg -i libisl10_0.12.2-2_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/c/cloog/libcloog-isl4_0.18.2-1+b2_amd64.deb
   sudo dpkg -i libcloog-isl4_0.18.2-1+b2_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/cpp-4.9_4.9.2-10_amd64.deb
   sudo dpkg -i cpp-4.9_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/libasan1_4.9.2-10_amd64.deb
   sudo dpkg -i libasan1_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/libgcc-4.9-dev_4.9.2-10_amd64.deb
   sudo dpkg -i libgcc-4.9-dev_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/gcc-4.9_4.9.2-10_amd64.deb
   sudo dpkg -i gcc-4.9_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/libstdc++-4.9-dev_4.9.2-10_amd64.deb
   sudo dpkg -i libstdc++-4.9-dev_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/g++-4.9_4.9.2-10_amd64.deb
   sudo dpkg -i g++-4.9_4.9.2-10_amd64.deb

** Set gcc 4.9 as the default compiler
   sudo unlink /usr/bin/gcc
   sudo ln -s /usr/bin/gcc-4.9 /usr/bin/gcc
   gcc --version
   sudo unlink /usr/bin/g++
   sudo ln -s /usr/bin/g++-4.9 /usr/bin/g++

** Install CUDA
   (Download cuda 8.0.44_linux.run)
   sudo chmod a+x cuda_8.0.44_linux.run
   su root
   export PERL5LIB=.
   sh cuda_8.0.44_linux.run

** Compilation test
   export HOST_COMPILER=clang++-3.8
   cd ~/NVIDIA_CUDA-8.0_Samples/0_Simple/matrixMull/
   make

** Set gcc 6 as default again
   sudo unlink /usr/bin/gcc
   sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc
   gcc --version
   sudo unlink /usr/bin/g++
   sudo ln -s /usr/bin/g++-6 /usr/bin/g++

** Cudnn
   Download cudnn from the nvidia site
   tar xvzf cudnn-8.0-linux-x64-v5.1-ga.tgz
   sudo cp cuda/include/cudnn.h /usr/local/cuda/include
   sudo cp cuda/lib64/libcudnn* /usr/local/cuda/lib64
   sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

Test
Install TensorFlow and Keras

sudo pip3 install keras
sudo pip3 install --upgrade tensorflow-gpu
To make it usable from the notebook and for everyuser.Put this in /etc/profile:
#export LD_LIBRARY_PATH=$LD_LIBRARY_PATH:/usr/local/cuda/lib64:/usr/local/lib:/usr/lib/x86_64-linux-gnu
export CUDA_HOME=/usr/local/cuda
export PATH=$PATH:/usr/local/cuda/bin
And append to /etc/ld.so.conf:

/usr/local/cuda/lib64
/usr/local/lib
/usr/lib/x86_64-linux-gnu
Test the examples (compile them first)

~/NVIDIA_CUDA-8.0_Samples/bin/x86_64/linux/release/matrixMul

Test with keras

python3 -c "import keras"
