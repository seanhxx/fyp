* Debian 9 Stretch - Installation Notes
** Install Nvidia drivers(Optional)
   sudo apt install linux-headers-$(uname -r|sed 's/[^-]*-[^-]*-//') nvidia-driver

** Downgrade to gcc 4.9
   Downgrade gcc to 4.9. After CUDA is installed you can set it back to gcc 6 To
   install just the drivers, the gcc 6 works. CUDA works only with gcc 4.9

   Install these packages:

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/gcc-4.9-base_4.9.2-10_amd64.deb

   sudo dpkg -i gcc-4.9-base_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/i/isl/libisl10_0.12.2-2_amd64.deb

   sudo dpkg -i libisl10_0.12.2-2_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/c/cloog/libcloog-isl4_0.18.2-1+b2_amd64.deb

   sudo dpkg -i libcloog-isl4_0.18.2-1+b2_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/cpp-4.9_4.9.2-10_amd64.deb

   sudo dpkg -i cpp-4.9_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/libasan1_4.9.2-10_amd64.deb

   sudo dpkg -i libasan1_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/libgcc-4.9-dev_4.9.2-10_amd64.deb

   sudo dpkg -i libgcc-4.9-dev_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/gcc-4.9_4.9.2-10_amd64.deb

   sudo dpkg -i gcc-4.9_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/libstdc++-4.9-dev_4.9.2-10_amd64.deb

   sudo dpkg -i libstdc++-4.9-dev_4.9.2-10_amd64.deb

   wget http://mirrors.tuna.tsinghua.edu.cn/debian/pool/main/g/gcc-4.9/g++-4.9_4.9.2-10_amd64.deb

   sudo dpkg -i g++-4.9_4.9.2-10_amd64.deb

** Set gcc 4.9 as the default compiler
   sudo unlink /usr/bin/gcc

   sudo ln -s /usr/bin/gcc-4.9 /usr/bin/gcc

   gcc --version

   sudo unlink /usr/bin/g++

   sudo ln -s /usr/bin/g++-4.9 /usr/bin/g++

** Install CUDA
   (Download cuda 8.0.44_linux.run)

   sudo chmod a+x cuda_8.0.44_linux.run

   su root

   export PERL5LIB=.

   sh cuda_8.0.44_linux.run

** Compilation test
   export HOST_COMPILER=clang++-3.8

   cd ~/NVIDIA_CUDA-8.0_Samples/0_Simple/matrixMull/

   make

** Install Cudnn
*** Download cudnn from the nvidia site
    tar xvzf cudnn-8.0-linux-x64-v6.0-ga.tgz
    
    sudo cp cuda/include/cudnn.h /usr/local/cuda/include
    
    sudo cp cuda/lib64/libcudnn.so.6.0.21 /usr/local/cuda/lib64

    sudo cp cuda/lib64/libcudnn_static.a /usr/local/cuda/lib64

    sudo ln -s /usr/local/cuda/lib64/libcudnn.so.6.0.21 /usr/local/cuda/lib64/libcudnn.so.6

    sudo ln -s /usr/local/cuda/lib64/libcudnn.so.6 /usr/local/cuda/lib64/libcudnn.so

    sudo chmod a+r /usr/local/cuda/include/cudnn.h /usr/local/cuda/lib64/libcudnn*

*** Download cudnn runtime library, developer library and code sample
    sudo dpkg -i libcudnn6_6.0.21-1+cuda8.0_amd64.deb

    sudo dpkg -i libcudnn6-dev_6.0.21-1+cuda8.0_amd64.deb

    sudo dpkg -i libcudnn6-doc_6.0.21-1+cuda8.0_amd64.deb

** Set Environment Variable
*** Add in .zshrc:
    export CUDA_HOME=/usr/local/cuda

    export CUDA_BIN=$CUDA_HOME/bin

    if [[ ! $PATH =~ $CUDA_BIN ]]; then

    export PATH=$CUDA_BIN:$PATH

    fi

    export LD_LIBRARY=/usr/local/cuda/lib64

    if [[ ! $LD_LIBRARY_PATH =~ $LD_LIBRARY ]]; then

    export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

    fi

*** Append to /etc/ld.so.conf:
    /usr/local/cuda/lib64

    /usr/local/lib

    /usr/lib/x86_64-linux-gnu

*** In /etc/profile:
    export PATH=/usr/local/cuda/bin:$PATH

    export LD_LIBRARY_PATH=/usr/local/cuda/lib64:$LD_LIBRARY_PATH

*** Update ldconfig  
    sudo ldconfig 

** Install Protobuf(maybe optional)
   wget https://github.com/google/protobuf/releases/download/v2.6.1/protobuf-2.6.1.tar.gz

   tar xzf protobuf-2.6.1.tar.gz

   cd protobuf-2.6.1

   sudo apt-get update

   sudo apt-get install build-essential

   sudo ./configure

   sudo make

   sudo make check

   sudo make install 

   sudo ldconfig

   protoc --version

** Configuration
   ./configure

   WARNING: Running Bazel server needs to be killed, because the startup options
   are different. You have bazel 0.8.1 installed.

   Please specify the location of python. [Default is /usr/bin/python]:
   /usr/bin/python3.5


   Found possible Python library paths:

   /usr/local/lib/python3.5/dist-packages

   /usr/lib/python3/dist-packages

   Please input the desired Python library path to use. Default is
   [/usr/local/lib/python3.5/dist-packages]

   Do you wish to build TensorFlow with jemalloc as malloc support? [Y/n]: n

   No jemalloc as malloc support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with Google Cloud Platform support? [Y/n]: n

   No Google Cloud Platform support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with Hadoop File System support? [Y/n]: n

   No Hadoop File System support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with Amazon S3 File System support? [Y/n]: n

   No Amazon S3 File System support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with XLA JIT support? [y/N]: n

   No XLA JIT support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with GDR support? [y/N]: n

   No GDR support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with VERBS support? [y/N]: n

   No VERBS support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with OpenCL SYCL support? [y/N]: n

   No OpenCL SYCL support will be enabled for TensorFlow.

   Do you wish to build TensorFlow with CUDA support? [y/N]: y

   CUDA support will be enabled for TensorFlow.

   Please specify the CUDA SDK version you want to use, e.g. 7.0. [Leave empty to default to CUDA 9.0]: 8.0


   Please specify the location where CUDA 8.0 toolkit is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:


   Please specify the cuDNN version you want to use. [Leave empty to default to cuDNN 7.0]: 6


   Please specify the location where cuDNN 6 library is installed. Refer to README.md for more details. [Default is /usr/local/cuda]:


   Please specify a list of comma-separated Cuda compute capabilities you want
   to build with. You can find the compute capability of your device at:
   https://developer.nvidia.com/cuda-gpus. Please note that each additional
   compute capability significantly increases your build time and binary size.
   [Default is: 5.2]


   Do you want to use clang as CUDA compiler? [y/N]: n

   nvcc will be used as CUDA compiler.

   Please specify which gcc should be used by nvcc as the host compiler. [Default is /usr/bin/gcc]: 


   Do you wish to build TensorFlow with MPI support? [y/N]: n

   No MPI support will be enabled for TensorFlow.

   Please specify optimization flags to use during compilation when bazel option "--config=opt" is specified[Default is -march=native]: -mavx -mavx2 -msse4.2


   Add "--config=mkl" to your bazel command to build with MKL support. Please
   note that MKL on MacOS or windows is still not supported. If you would like
   to use a local MKL instead of downloading, please set the environment
   variable "TF_MKL_ROOT" every time before build.

   Would you like to interactively configure ./WORKSPACE for Android builds? [y/N]: n

   Not configuring the WORKSPACE for Android builds.

   Configuration finished
   
** Build TensorFlow pip package 
   Follow the instruction at this link:https://www.tensorflow.org/install/install_sources?hl=zh-cn#ConfigureInstallation

   Specify the optimization flag: -mavx -mavx2 -msse4.2

   bazel clean --expunge

   bazel build --config=opt --copt=-mavx --copt=-mavx2 --copt=-msse4.2 --config=cuda //tensorflow/tools/pip_package:build_pip_package
   
** Generate .whl file and install tensorflow
   bazel-bin/tensorflow/tools/pip_package/build_pip_package /tmp/tensorflow_pkg

   pip3 install /tmp/tensorflow_pkg/tensorflow-*.whl
** Set gcc 6 as default again (last step)
   sudo unlink /usr/bin/gcc

   sudo ln -s /usr/bin/gcc-6 /usr/bin/gcc

   gcc --version

   sudo unlink /usr/bin/g++

   sudo ln -s /usr/bin/g++-6 /usr/bin/g++

